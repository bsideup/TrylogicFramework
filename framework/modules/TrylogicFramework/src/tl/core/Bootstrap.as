package tl.core{	import flash.display.*;	import mx.core.IStateClient2;	import tl.actions.*;	import tl.factory.*;	import tl.ioc.*;	import tl.ioc.mxml.IAssociate;	import tl.service.IService;	import tl.utils.StatesImpl;	import tl.view.IView;	[Frame(factoryClass="tl.core.TrylogicApplicationLoader")]	public class Bootstrap	{		{			IoCHelper.registerType( Stage, TrylogicStage );			IoCHelper.registerType( IStateClient2, StatesImpl, ConstructorFactory );			IoCHelper.registerType( IActionDispatcher, ActionDispatcher, SingletonFactory );		}		public var backgroundColor:Number;		public var frameRate:Number;		public var preloader:Class;		public var applicationView:IView;		public var subModules:Vector.<Bootstrap>;		private var _services:Vector.<IService>;		private var initialized:Boolean = false;		public function set iocMap( value:Vector.<IAssociate> ):void		{			for each( var assoc:IAssociate in value )			{				IoCHelper.registerAssociate( assoc );			}		}		public function set services( value:Vector.<IService> ):void		{			for each( var service:IService in value )			{				ServiceFactory.registerService( Object( service ).constructor, service );			}			_services = value;			initServices();		}		internal function initServices():void		{			if ( !initialized )			{				return;			}			for each( var service:IService in _services )			{				if ( !service.initialized )				{					service.init();				}			}			for each( var bootstrap:Bootstrap in subModules )			{				bootstrap.initServices();			}		}		internal final function init( applicationLoader:TrylogicApplicationLoader ):void		{			if ( applicationView == null )			{				throw new ArgumentError( "applicationView of Bootstrap can't be null" );			}			initialized = true;			initServices();			applicationView.controller.addViewToContainer( applicationLoader );		}	}}