package mx.core{	import flash.display.Sprite;	import flash.events.KeyboardEvent;	import mx.states.IOverride;	import mx.states.State;	import mx.styles.IStyleManager2;	public class UIComponent extends Sprite implements IStateClient2	{		protected var _currentState : String;		private var _oldState : String;		private var _states : Object;		private var _transitions : Array;		//----------------------------------		//  currentState		//----------------------------------		[Bindable]		public function get currentState() : String		{			return _currentState;		}		public function set currentState( value : String ) : void		{			_oldState = _currentState;			_currentState = value;			statesInvalidate();		}		[ArrayElementType("mx.states.State")]		//----------------------------------		//  states		//----------------------------------		public function get states() : Array		{			var statesArray : Array = [];			for each ( var state : State in _states )			{				statesArray.push( state );			}			return statesArray;		}		public function set states( value : Array ) : void		{			_states = { };			for each ( var state : State in value )			{				state.mx_internal::initialize();				_states[state.name] = state;			}			statesInvalidate();		}		//----------------------------------		//  transitions		//----------------------------------		[ArrayElementType("mx.states.Transition")]		public function get transitions() : Array		{			return _transitions;		}		public function set transitions( value : Array ) : void		{			_transitions = value;		}		public function hasState( stateName : String ) : Boolean		{			return _states[stateName] is State;		}		protected function statesInvalidate() : void		{			if ( !_states || _oldState == _currentState ) return;			var oride : IOverride;			var state : State;			if ( _oldState && _states[_oldState] )			{				state = _states[_oldState];				for each ( oride in state.overrides )				{					oride.remove( this );				}				state.mx_internal::dispatchExitState();			}			state = _states[_currentState];			if ( state )			{				for each ( oride in state.overrides )				{					oride.apply( this );				}				state.mx_internal::dispatchEnterState();			}		}		protected function createChildren() : void		{		}		protected function commitProperties() : void		{		}		protected function measure() : void		{		}		protected function updateDisplayList( unscaledWidth : Number, unscaledHeight : Number ) : void		{		}		public function styleChanged( styleProp : String ) : void		{		}		public function regenerateStyleCache( recursive : Boolean ) : void		{		}		public function notifyStyleChangeInChildren( styleProp : String, recursive : Boolean ) : void		{		}		public function get styleManager() : IStyleManager2		{			return null;		}		public function initialize() : void		{		}		protected function keyDownHandler( event : KeyboardEvent ) : void		{		}		protected function keyUpHandler( event : KeyboardEvent ) : void		{		}	}}