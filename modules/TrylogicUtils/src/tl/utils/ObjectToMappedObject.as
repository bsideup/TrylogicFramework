package tl.utils{	import flash.net.getClassByAlias;	import flash.utils.getDefinitionByName;	public class ObjectToMappedObject	{		public static function parseObject( obj : Object, objectClass : Class = null ) : Object		{			if ( objectClass != null )			{			}			else if ( obj.hasOwnProperty( "_metaClassName" ) )			{				objectClass = getClassByAlias( obj._metaClassName );			}			else			{				objectClass = Object;			}			var instance : Object = new (objectClass)();			var desc : XMLList = describeTypeCached( instance ).variable;			for ( var prop : String in obj )			{				if ( prop != "_metaClassName" )				{					var propertyType : String = desc.(@name.toString() == prop).@type.toString();					var value : *;					// If type isn't founded, or it's simple type (See ECMAScript specs)					if ( propertyType == "" ||							propertyType == "String" ||							propertyType == "Number" ||							propertyType == "uint" ||							propertyType == "int" ||							propertyType == "Boolean"							)					{						value = obj[prop];					}					// If propertyType is Vector, create and fill it					else if ( propertyType.indexOf( "__AS3__.vec::Vector." ) != -1 )					{						value = new (getDefinitionByName( propertyType ))();						var vectorInnerType : String = propertyType.substr( 21, propertyType.length - 22 );						for each( var innerData : * in obj[prop] )						{							// If type is a simple type (See ECMAScript specs)							if ( vectorInnerType == "" ||									vectorInnerType == "String" ||									vectorInnerType == "Number" ||									vectorInnerType == "uint" ||									vectorInnerType == "int" ||									vectorInnerType == "Boolean"									)							{								value.push( innerData );							}							else							{								value.push( parseObject( innerData, getDefinitionByName( vectorInnerType ) as Class ) );							}						}					}					// Else (if it's Object, or some custom type) just parse it recursive					else					{						value = parseObject( obj[prop], getDefinitionByName( propertyType ) as Class );					}					instance[prop] = value;				}			}			return instance;		}	}}